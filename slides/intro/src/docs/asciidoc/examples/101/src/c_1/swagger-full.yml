kind: "Template"
apiVersion: "v1"
metadata:
  name: "SwaggerUI"
  annotations:
    openshift.io/display-name: "SwaggerUI"
    description: "SwaggerUI instance"

parameters:
  - name: "SERVICE_NAME"
    displayName: "Service name"
    description: "The name of the related service"
    required: true

  - name: "VERSION"
    displayName: "Swagger-UI version"
    description: "The swagger-ui version"
    required: true

  - name: "GIT_URL"
    displayName: "Git url"
    description: "The http git repository url for building the service"
    required: true

  - name: "GIT_REF"
    displayName: "Git ref"
    description: "The git repository ref for building the service"
    required: true

  - name: "CONTEXT_DIR"
    displayName: "Context Dir"
    description: "The context directory of the git repository for building the service"
    required: true

  - name: "SECRET_GIT"
    displayName: "Secret name for git"
    description: "The http basic auth secret for accessing git "
    required: true

objects:
  - kind: "ImageStream"
    apiVersion: "v1"
    metadata:
      name: "${SERVICE_NAME}"
      labels:
        app: "${SERVICE_NAME}"

  - kind: "BuildConfig"
    apiVersion: "v1"
    metadata:
      name: "${SERVICE_NAME}"
      labels:
        name: "${SERVICE_NAME}"
        app: "${SERVICE_NAME}"
    spec:
      source:
        type: "Git"
        git:
          uri: "${GIT_URL}"
          ref: "${GIT_REF}"
        sourceSecret:
          name: "${SECRET_GIT}"
        contextDir: "${CONTEXT_DIR}"
      strategy:
        type: "Docker"
        dockerStrategy:
          env:
            - name: "BUILD_LOGLEVEL"
              value: "5"
            - name: "VERSION"
              value: "${VERSION}"
      output:
        to:
          kind: "ImageStreamTag"
          name: "${SERVICE_NAME}:latest"
          labels:
            app: "${SERVICE_NAME}"
      triggers:
        - type: "ConfigChange"

  - kind: "DeploymentConfig"
    apiVersion: "v1"
    metadata:
      name: "${SERVICE_NAME}"
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        app: "${SERVICE_NAME}"
    spec:
      strategy:
        type: "Recreate"
      replicas: "1"
      selector:
        name: "${SERVICE_NAME}"
      triggers:
        - type: "ConfigChange"
        - type: "ImageChange"
          imageChangeParams:
            automatic: true
            containerNames:
              - "${SERVICE_NAME}"
            from:
              kind: "ImageStreamTag"
              name: "${SERVICE_NAME}:latest"
      template:
        metadata:
          labels:
            name: "${SERVICE_NAME}"
        spec:
          containers:
            - name: "${SERVICE_NAME}"
              image: " "
              imagePullPolicy: Always
              ports:
                - containerPort: 8080
                  protocol: TCP
              readinessProbe:
                successThreshold: 1
                failureThreshold: 5
                timeoutSeconds: 5
                initialDelaySeconds: 10
                periodSeconds: 10
                httpGet:
                  path: /
                  port: 8080
                  scheme: HTTP
              livenessProbe:
                successThreshold: 1
                failureThreshold: 2
                timeoutSeconds: 5
                initialDelaySeconds: 10
                periodSeconds: 10
                httpGet:
                  path: /
                  port: 8080
                  scheme: HTTP
              # On dedicated nodes we get 'insufficent cpu'
              resources:
                requests:
                  memory: "32Mi"
                  cpu: "1000m"
                limits:
                  memory: "256Mi"
                  cpu: "2000m"
              terminationMessagePath: "/dev/termination.log"
              capabilities:
                securityContext:
                  capabilities:
                    privileged: false

  - kind: Route
    apiVersion: v1
    id: ${SERVICE_NAME}
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        app: ${SERVICE_NAME}
      name: ${SERVICE_NAME}
    spec:
      to:
        kind: "Service"
        name: "${SERVICE_NAME}"
      targetPort: "${SERVICE_NAME}"
#      tls:
#        termination: edge
#        insecureEdgeTerminationPolicy: Redirect

  - kind: "Service"
    apiVersion: "v1"
    metadata:
      name: "${SERVICE_NAME}"
      labels:
        app: "${SERVICE_NAME}"
    spec:
      ports:
        - name: "${SERVICE_NAME}"
          protocol: "TCP"
          port: 80
          targetPort: 8080
      selector:
        name:  "${SERVICE_NAME}"
      type: "ClusterIP"
      sessionAffinity: "None"
